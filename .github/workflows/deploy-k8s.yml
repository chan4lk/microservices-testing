name: ci

on: 
    push:
      branches: ["main"]

    workflow_dispatch:

permissions:
  checks: write
  pull-requests: write

# Environment variables available to all jobs and steps in this workflow
env:
  TEST_DLL: "tests/specflow/MicroServices.Testing/bin/Debug/net6.0/MicroServices.Testing.dll"
  TEST_JSON: "tests/specflow/MicroServices.Testing/bin/Debug/net6.0/TestExecution.json"
  TEST_OUTPUT: "MicroServices.Testing.html"
  Configuration: "Debug"
  API_HOST: "${{ secrets.HOST }}"
  APISERVER: "${{ secrets.KUBERNETES_API_SERVER_URL}}"
  access_token: "${{ secrets.KUBERNETES_API_SERVER_TOKEN}}"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - 
        name: checkout
        uses: actions/checkout@v3

      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push Employee API
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: chan4lk/employee-api:latest
          file: apps/employee-management/dockerfile
      -
        name: Build and push Auth API
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: chan4lk/auth-api:latest
          file: apps/auth-api/dockerfile

      - name: Azure login
        id: login
        uses: azure/login@v1.4.3
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install cli
        run: |
          sudo az aks install-cli

      - name: Set AKS context
        id: set-context
        uses: azure/aks-set-context@v3
        with:
          resource-group: '${{ secrets.resource_group }}' 
          cluster-name: '${{ secrets.cluster_name }}'
          
      - name: Get credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.resource_group }} --name ${{ secrets.cluster_name }}

      - name: Deploy to AKS
        id: deploy-aks
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'beta'
          manifests: |
             ./k8s/aks.yaml

  k6_load_test:
    needs: deploy
    name: k6 Load Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Run Get Data k6 test
        uses: grafana/k6-action@v0.2.0
        with:
          filename: tests/k6/test.js
          cloud: true
          token: ${{ secrets.K6_TOKEN }}
          flags: --env API_HOST=${{ env.API_HOST }}

      - name: Run SignUp k6 test
        uses: grafana/k6-action@v0.2.0
        with:
          filename: tests/k6/test-create.js
          cloud: true
          token: ${{ secrets.K6_TOKEN }}
          flags: --env API_HOST=${{ env.API_HOST }}

  automated-postman-tests:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh

      - name: Run API tests
        run: |
          cd ./tests/postman
          postman collection run "./api.postman_collection.json" -e "./api.postman_environment.json" --env-var baseUrl="http://${{ env.API_HOST }}" --env-var APISERVER="${{ env.APISERVER }}" --env-var access_token="${{ env.access_token }}"

  automated-specflow-tests:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'

      - name: Install dependencies
        run: |
          cd tests/specflow/MicroServices.Testing
          dotnet restore

      - name: Build
        run: |
          cd tests/specflow/MicroServices.Testing
          dotnet build --configuration ${{ env.Configuration }} --no-restore

      - name: Test
        run: |
          cd tests/specflow/MicroServices.Testing
          dotnet test --no-build --configuration ${{ env.Configuration }} -l:trx
         
      - name: Test Report
        if: success() || failure()
        run: |
          dotnet tool install --global SpecFlow.Plus.LivingDoc.CLI
          livingdoc test-assembly ${{ env.TEST_DLL }} -t ${{ env.TEST_JSON }} -o ${{ env.TEST_OUTPUT}}

      - name: Publish Specflow Test Logs
        if: success() || failure()
        uses: actions/upload-artifact@v2
        with:
          name: SpecflowLogs
          path: |
            ${{ env.TEST_OUTPUT}}

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            tests/specflow/MicroServices.Testing/**/*.trx